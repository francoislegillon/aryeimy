/*! Stub A-Frame build for offline development with minimal component lifecycle support. */
(function(){
  const scenes = [];
  const components = Object.create(null);
  const systems = Object.create(null);

  function registerComponent(name, definition){
    components[name] = definition || {};
    console.info(`[AFRAME:stub] Component "${name}" registered.`);
  }

  function registerSystem(name, definition){
    systems[name] = definition || {};
    console.info(`[AFRAME:stub] System "${name}" registered.`);
  }

  function parseComponentValue(value){
    if (!value) return {};
    if (typeof value !== 'string') return value;
    const data = {};
    value.split(';').forEach((chunk) => {
      const part = chunk.trim();
      if (!part) return;
      const [rawKey, ...rest] = part.split(':');
      if (!rawKey) return;
      const key = rawKey.trim();
      const rawValue = rest.join(':').trim();
      data[key] = parsePrimitive(rawValue);
    });
    return data;
  }

  function parsePrimitive(value){
    if (value === '') return '';
    if (value === 'true') return true;
    if (value === 'false') return false;
    const num = Number(value);
    if (!Number.isNaN(num)) return num;
    return value;
  }

  function instantiateAllComponents(el){
    el.getAttributeNames().forEach((name) => {
      if (components[name]) {
        instantiateComponent(el, name, el.getAttribute(name));
      }
    });
  }

  function instantiateComponent(el, name, rawValue){
    const definition = components[name];
    if (!definition) return null;
    const data = parseComponentValue(rawValue);
    el.__aframeComponents = el.__aframeComponents || {};
    el.components = el.__aframeComponents;
    const existing = el.__aframeComponents[name];
    if (existing) {
      existing.data = data;
      if (typeof existing.update === 'function') {
        try {
          existing.update(data);
        } catch (error) {
          console.error(`[AFRAME:stub] Component ${name} update error`, error);
        }
      }
      return existing;
    }
    const instance = Object.create(definition);
    instance.el = el;
    instance.data = data;
    el.__aframeComponents[name] = instance;
    try {
      if (typeof instance.init === 'function') {
        instance.init();
      }
      if (typeof instance.update === 'function') {
        instance.update(data);
      }
    } catch (error) {
      console.error(`[AFRAME:stub] Component ${name} init error`, error);
    }
    return instance;
  }

  function defineCustomElement(name){
    if (customElements.get(name)) return;
    class StubElement extends HTMLElement {
      static get observedAttributes(){
        return Object.keys(components);
      }
      constructor(){
        super();
        this.__aframeComponents = {};
        this.components = this.__aframeComponents;
      }
      connectedCallback(){
        instantiateAllComponents(this);
        if (name === 'a-scene'){
          this.style.display = 'block';
          this.style.position = 'relative';
          this.style.width = '100%';
          this.style.height = '100%';
          scenes.push(this);
          const event = new Event('loaded');
          setTimeout(() => this.dispatchEvent(event));
        }
      }
      attributeChangedCallback(attrName, oldValue, newValue){
        if (oldValue === newValue) return;
        if (components[attrName]) {
          instantiateComponent(this, attrName, newValue);
        }
      }
    }
    customElements.define(name, StubElement);
  }

  ['a-scene','a-entity','a-plane','a-camera'].forEach(defineCustomElement);

  window.AFRAME = {
    version: 'stub-0.2.0',
    scenes,
    components,
    systems,
    registerComponent,
    registerSystem,
    utils: {
      device: {}
    }
  };
  console.info('[AFRAME:stub] Loaded enhanced A-Frame placeholder.');
})();
